工厂系列模式：创建模式

简单工厂（Simple Factory）
一个工厂类，提供一个静态的方法，根据入参的不同，返回不同的派生自同一个父类（或实现同一接口）的实例对象。

工厂方法模式（Factory Pattern）
Define an interface for creating an object, but let subclasses decide which class to instantiate.
Factory Method lets a class defer instantiation to subclasses.
定义一个用于创建对象的接口，并由子类决定实例化哪个对象
工厂方法，使一个类的实例化由子类决定

抽象工厂模式（Abstract Factory Pattern）
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
定义一个用于创建一组有关联关系的对象群的接口，无须指定他们的具体实现类，由子类去管理它们的具体关系

使用场景：
    解决接口选择的问题。
    需要灵活可扩展的决定创建不同实体。
关键代码：
    暴露接口，具体创建过程在其子类管理。
应用实例：
    1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。
    2、Hibernate 换数据库只需换方言和驱动就可以。
优点：
    1、封装性代码结构清晰，对象的创建统一管控。
    2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
    3、解耦，屏蔽产品的具体实现，调用者只关心产品的接口。
    4、抽象工厂对调用者屏蔽了对象组之间的关系，关系有具体实现决定
缺点：
    1、每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。
    2、抽象工厂纵向增加非常繁琐，需要调整所有类，严重违反开闭原则

使用场景：
    1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。
    2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。
    3、设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

注意事项：
    作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。
    有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。
    如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。

工厂模式和抽象工厂模式的区别：
    工厂模式，一个工厂生产一种对象
    抽象工厂模式，一个工厂生产一群对象（这些对象之间有相互关系，或者是被调用有相互依赖）（车辆版本发布兼容，可以考虑抽象工厂实现）