设计模式

基本原则：
    1.开闭原则(Open Close Principle)
        对扩展开放，对修改关闭。
        在程序需要进行拓展的时候，不应该去修改原有的代码，实现一个热插拔的效果。
        简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。
    2.里氏代换原则(Liskov Substitution Principle)
        任何基类可以出现的地方，子类一定可以出现。
        LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。
        里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。
    3.依赖倒转原则(Dependence Inversion Principle)
        这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
    4.接口隔离原则(Interface Segregation Principle)
        使用多个隔离的接口，比使用单个接口要好。
        另外一个意思是：降低类之间的耦合度。
        由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。
    5.迪米特法则(Demeter Principle)
        最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
    6.合成复用原则(Composite Reuse Principle)
        尽量使用合成/聚合的方式，而不是使用继承。
    7.	单一职责

模式分类
    1.创建型模式（Creational Patterns）
        负责对象实体的创建，使得对象的创建过程相对调用者透明化

    2.结构型模式（Structural Patterns）

    3.行为型模式（Behavioral Patterns）

创建型模式总结：
创建型模式总体上比较简单，它们的作用就是为了产生实例对象，算是各种工作的第一步了，因为我们写的是面向对象的代码，所以我们第一步当然是需要创建一个对象了。
简单工厂模式最简单；工厂模式在简单工厂模式的基础上增加了选择工厂的维度，需要第一步选择合适的工厂；抽象工厂模式有产品族的概念，如果各个产品是存在兼容性问题的，就要用抽象工厂模式。单例模式就不说了，为了保证全局使用的是同一对象，一方面是安全性考虑，一方面是为了节省资源；建造者模式专门对付属性很多的那种类，为了让代码更优美；原型模式用得最少，了解和 Object 类中的 clone() 方法相关的知识即可。


