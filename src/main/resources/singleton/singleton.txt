单例模式（Singleton Pattern）：创建型模式
Ensure a class has only one instance, and provide a global point of access to it.
确保只有单个对象被创建，并自行实体化，提供可直接访问创建自身对象的全局唯一方式。

特点：
    单例类只能有一个实例对象
    单例类必须自身控制自身的创建（构造方法私有化），只有自己才能把控自己
    单例类必须把创建自身的唯一方式暴露出来，已提供使用

使用场景：
    保证一个类仅有一个实例，并提供一个访问它的全局访问点。
关键代码：
    构造函数是私有的，判断自身实例是否已经初始化，如果有则返回，如果没有则创建。
解决的问题：
    一个全局使用的类，被创建与销毁，并且创建的方式是同一的，使用单例模式节省系统资源开销。

优点：
    1.在内存中只有一个实例，减少了内存开销，尤其是频繁的同一种方式创建和销毁实例。
    2.避免对资源的多重占用。
缺点：
    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。
    测试不便mock

多线程安全需要考虑，单例模式的实现方式
    1.懒汉式非线程安全
    2.懒汉式线程安全
    3.饿汉式
    4.双检锁/双重校验锁
    5.登记式/静态内部类
    6.枚举

使用场景：
    1、要求生产唯一序列号。
    2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。
    3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。

经验之谈：
    一般情况下，不建议使用第 1 种和第 2 种懒汉方式，
    建议使用第 3 种饿汉方式。
    只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。
    如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。

Spring容器，Bean的scope默认单例